Extracting predictions and class probabilities
#
source('~/Time Series Analysis/model_training_and_tuning.R')
predict(gbmFit3, newdata = head(testing))
predict(gbmFit3, newdata = head(testing), type = "prob")
predict(gbmFit3, newdata = head(testing), type = "probability")
predict(gbmFit3, newdata = head(testing), type = "raw")
prob
#' Exploring and comparing resampling distributions
##' within model
## xyplot, stripplot to plot resampling statistics against tuning params(numeric).
## histogram and densityplot to look at distributions of tuning parameters.
trellis.par.set(caretTheme())
densityplot(gbmFit3, pch = "|")
?densityplot
# use resamples = all as control object to plot resampling results across multiple tuning parameters
set.seed(825)
svmFit <- caret::train(Class ~ .,
data = training,
method = "svmRadial",
trControl = fitControl,
preProc = c("center","scale"),
tuneLength = 8,
metric = "ROC")
svmFit
rda <- caret::train(Class ~ .,
data = training,
method = "rda",
trControl = fitControl,
tuneLength = 4,
metric = "ROC")
rdaFit <- caret::train(Class ~ .,
data = training,
method = "rda",
trControl = fitControl,
tuneLength = 4,
metric = "ROC")
rdaFit
# measuring performance difference between models
resamps <- resamples(list(GBM = gbmFit3,
SVM = svmFit,
RDA = rdaFit))
resamps
summary(resamps)
#visualizing resamples
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2,.2,.2,.4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1,0,0,.7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
bwplot(resamps, layout = c(3, 1))
trellis.par.set(caretTheme())
dotplot(resamps, metric = "ROC")
trellis.par.set(theme1)
xyplot(resamps, what = "BlandAltman")
xyplot(resamps, what = "BlandAltman") # difference vs mean plot
splom(resamps)
splom(resamps) #scattered plot matrix. (Determine correlation btwn series of variables and arrang them in matrix)
diffvalues <- diff(resamples)
diffvalues <- diff(resamps)
diffvalues
summary(diffvalues)
trellis.par.set(theme1)
bwplot(diffvalues, layout = c(3,1))
trellis.par.set(caretTheme())
dotplot(difValues)
dotplot(diffValues)
dotplot(diffvalues)
#' fitting models without parameter tuning
fitControl <- trainControl(method = "none", classProbs = TRUE)
set.seed(825)
gbmFit4 <- caret::train(Class ~ .,
data = training,
trControl = fitControl,
verbose = FALSE,
tunGrid = data.frame(interaction.depth = 4,
n.trees = 100,
shrinkage = .1,
n.minobsinnode = 20))
gbmFit4 <- caret::train(Class ~ .,
data = training,
trControl = fitControl,
verbose = FALSE,
tunGrid = data.frame(interaction.depth = 4,
n.trees = 100,
shrinkage = .1,
n.minobsinnode = 20),
metric = "ROC")
gbmFit4
predict(gbmFit4, newdata = head(testing))
predict(gbmFit4, newdata = head(testing), type = "prob")
setwd("~/Time Series Analysis")
setwd("~/Time Series Analysis/forecasting")
setwd("~/Time Series Analysis")
library(doParallel)
install.packages("doParallel")
library(doParallel)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
model <- train(y ~ .,
data = training,
method = "rf")
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(825)
gbmFit3 <- caret::train(Class ~ .,
data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
metric = "ROC")
stopCluster(cl)
gbmFit3
View(cl)
View(testing)
